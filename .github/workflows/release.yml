name: Release nanoframe core and packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: setver
        name: Derive tag version
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  linux-x64:
    name: Build & publish linux-x64
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install system deps for wry/webkitgtk
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev || true
          # Prefer 4.1 on newer Ubuntu, fall back to 4.0 on older images
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: Build nanoframe-core (linux-x64)
        working-directory: packages/nanoframe-core
        run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Copy binary into package bin
        run: |
          cp packages/nanoframe-core/target/x86_64-unknown-linux-gnu/release/nanoframe-core packages/nanoframe-core-linux-x64/bin/nanoframe-core
          chmod +x packages/nanoframe-core-linux-x64/bin/nanoframe-core
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Set version in platform package
        working-directory: packages/nanoframe-core-linux-x64
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
      - name: Check if version exists
        id: check
        shell: bash
        working-directory: packages/nanoframe-core-linux-x64
        run: |
          if npm view @nanoframe/core-linux-x64@${{ needs.prepare.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Publish @nanoframe/core-linux-x64
        if: steps.check.outputs.exists == 'false'
        working-directory: packages/nanoframe-core-linux-x64
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  windows-x64:
    name: Build & publish win32-x64
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Build nanoframe-core (win32-x64)
        working-directory: packages/nanoframe-core
        run: cargo build --release --target x86_64-pc-windows-msvc
      - name: Copy binary into package bin
        shell: pwsh
        run: |
          Copy-Item -Force "packages/nanoframe-core/target/x86_64-pc-windows-msvc/release/nanoframe-core.exe" "packages/nanoframe-core-win32-x64/bin/nanoframe-core.exe"
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Set version in platform package
        working-directory: packages/nanoframe-core-win32-x64
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
      - name: Check if version exists
        id: check
        shell: pwsh
        working-directory: packages/nanoframe-core-win32-x64
        run: |
          $exists = npm view @nanoframe/core-win32-x64@${{ needs.prepare.outputs.version }} 2>$null; if ($LASTEXITCODE -eq 0) {"exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append} else {"exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append}
      - name: Publish @nanoframe/core-win32-x64
        if: steps.check.outputs.exists == 'false'
        working-directory: packages/nanoframe-core-win32-x64
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  windows-arm64:
    name: Build & publish win32-arm64
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-pc-windows-msvc
      - name: Build nanoframe-core (win32-arm64)
        working-directory: packages/nanoframe-core
        run: cargo build --release --target aarch64-pc-windows-msvc
      - name: Copy binary into package bin
        shell: pwsh
        run: |
          Copy-Item -Force "packages/nanoframe-core/target/aarch64-pc-windows-msvc/release/nanoframe-core.exe" "packages/nanoframe-core-win32-arm64/bin/nanoframe-core.exe"
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Set version in platform package
        working-directory: packages/nanoframe-core-win32-arm64
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
      - name: Check if version exists
        id: check
        shell: pwsh
        working-directory: packages/nanoframe-core-win32-arm64
        run: |
          $exists = npm view @nanoframe/core-win32-arm64@${{ needs.prepare.outputs.version }} 2>$null; if ($LASTEXITCODE -eq 0) {"exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append} else {"exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append}
      - name: Publish @nanoframe/core-win32-arm64
        if: steps.check.outputs.exists == 'false'
        working-directory: packages/nanoframe-core-win32-arm64
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  macos-x64:
    name: Build & publish darwin-x64
    needs: prepare
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Build nanoframe-core (darwin-x64)
        working-directory: packages/nanoframe-core
        run: cargo build --release --target x86_64-apple-darwin
      - name: Copy binary into package bin
        run: |
          cp packages/nanoframe-core/target/x86_64-apple-darwin/release/nanoframe-core packages/nanoframe-core-darwin-x64/bin/nanoframe-core
          chmod +x packages/nanoframe-core-darwin-x64/bin/nanoframe-core
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Set version in platform package
        working-directory: packages/nanoframe-core-darwin-x64
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
      - name: Check if version exists
        id: check
        shell: bash
        working-directory: packages/nanoframe-core-darwin-x64
        run: |
          if npm view @nanoframe/core-darwin-x64@${{ needs.prepare.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Publish @nanoframe/core-darwin-x64
        if: steps.check.outputs.exists == 'false'
        working-directory: packages/nanoframe-core-darwin-x64
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  macos-arm64:
    name: Build & publish darwin-arm64
    needs: prepare
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build nanoframe-core (darwin-arm64)
        working-directory: packages/nanoframe-core
        run: cargo build --release --target aarch64-apple-darwin
      - name: Copy binary into package bin
        run: |
          cp packages/nanoframe-core/target/aarch64-apple-darwin/release/nanoframe-core packages/nanoframe-core-darwin-arm64/bin/nanoframe-core
          chmod +x packages/nanoframe-core-darwin-arm64/bin/nanoframe-core
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Set version in platform package
        working-directory: packages/nanoframe-core-darwin-arm64
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
      - name: Check if version exists
        id: check
        shell: bash
        working-directory: packages/nanoframe-core-darwin-arm64
        run: |
          if npm view @nanoframe/core-darwin-arm64@${{ needs.prepare.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Publish @nanoframe/core-darwin-arm64
        if: steps.check.outputs.exists == 'false'
        working-directory: packages/nanoframe-core-darwin-arm64
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  publish-main:
    name: Publish nanoframe package
    needs: [prepare, linux-x64, windows-x64, windows-arm64, macos-x64, macos-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure jq is installed
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
      - name: Update version and optionalDependencies
        working-directory: packages/nanoframe
        run: |
          VERSION='${{ needs.prepare.outputs.version }}'
          jq --arg v "$VERSION" \
            '.version=$v
             | .optionalDependencies["@nanoframe/core-win32-x64"]=$v
             | .optionalDependencies["@nanoframe/core-win32-arm64"]=$v
             | .optionalDependencies["@nanoframe/core-darwin-x64"]=$v
             | .optionalDependencies["@nanoframe/core-darwin-arm64"]=$v
             | .optionalDependencies["@nanoframe/core-linux-x64"]=$v' \
            package.json > package.json.tmp && mv package.json.tmp package.json
      - name: Install dependencies
        working-directory: packages/nanoframe
        run: npm install
      - name: Build package
        working-directory: packages/nanoframe
        run: npm run build
      - name: Check if version exists
        id: check
        shell: bash
        working-directory: packages/nanoframe
        run: |
          if npm view nanoframe@${{ needs.prepare.outputs.version }} > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Publish nanoframe
        if: steps.check.outputs.exists == 'false'
        working-directory: packages/nanoframe
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

  create-release:
    name: Create GitHub Release
    needs: [prepare, publish-main]
    runs-on: ubuntu-latest
    steps:
      - name: Create release with generated notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
